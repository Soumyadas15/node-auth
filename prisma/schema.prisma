// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String?        @unique
  password      String?
  provider      String?


  accounts      Account[]
  conversations     UserConversation[]
  
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id        String    @id @default(uuid())
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  messages  Message[]
  users     UserConversation[]
}

model UserConversation {
  userId        String
  conversationId String

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

model Message {
  id             String       @id @default(uuid())
  content        String
  createdAt      DateTime     
  updatedAt      DateTime     @updatedAt
  isEdited       Boolean      @default(false)

  senderId       String
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  recipientId     String
  recipient       User         @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)

  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model RequestLog {
  id          String   @id @default(uuid())
  ip          String
  body        String
  timeOfCall  DateTime @default(now())
  username    String?

  @@index([timeOfCall])
}